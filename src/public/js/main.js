 if ($('#sidebar').length > 0) { $('#page-container').addClass('sidebar-o'); if(localStorage.getItem('sidebar_mini')==='true'){ $('#page-container').addClass('sidebar-mini'); }else{ $('#page-container').removeClass('sidebar-mini'); } $('[data-action="sidebar_mini_toggle"]').click(function(){ localStorage.setItem('sidebar_mini', !$('#page-container').hasClass('sidebar-mini')); }); } function saveBlockState() { const blockStates = {}; $(".block_remember_state[id]").each(function () { var activeTab = ''; $(this).find('.nav-item').each(function () { if($(this).find('button').hasClass('active')) { activeTab = $(this).find('button').attr('id'); } }); const blockId = $(this).attr("id"); blockStates[blockId] = { hidden: $(this).hasClass("block-mode-hidden"), fullscreen: $(this).hasClass("block-mode-fullscreen"), activeTab: activeTab }; }); localStorage.setItem("blockStates", JSON.stringify(blockStates)); } function restoreBlockState() { const blockStates = JSON.parse(localStorage.getItem("blockStates")) || {}; const blockCount = $(".block_remember_state[id]").length; for (const blockId in blockStates) { const block = $(".block_remember_state#" + blockId); let is_active = false; let activeTab = ''; block.find('.nav-item').each(function () { $(this).find('button').removeClass('active'); activeTab = $(this).find('button').attr('id'); if(activeTab == blockStates[blockId].activeTab ) { $(this).find('button').addClass('active'); is_active = true; } }); block.find('.tab-pane.fade').each(function () { $(this).removeClass('show active'); if($(this).attr('aria-labelledby') == blockStates[blockId].activeTab) { $(this).addClass('show active'); } }); if(!is_active) { activeTab = $(".block_remember_state#" + blockId + " .nav-item .nav-link").first().attr('id'); $("#"+ activeTab ).addClass('active'); $(".block_remember_state#" + blockId + " .tab-content .tab-pane").first().addClass('show active'); } if (blockCount === 1) { block.removeClass("block-mode-hidden"); } else { block.toggleClass("block-mode-hidden", blockStates[blockId].hidden); } block.toggleClass("block-mode-fullscreen", blockStates[blockId].fullscreen); } } restoreBlockState(); $(function() { $(".block_remember_state .nav-item").on("click", function (event) { const block = $(this).closest(".block_remember_state[id]"); const blockCount = $(".block_remember_state[id]").length; saveBlockState(); }); }); $('.block_remember_state [data-action="fullscreen_toggle"]').on("click", function (event) { event.stopImmediatePropagation(); const block = $(this).closest(".block_remember_state[id]"); if (block.length === 0) return; const blockId = block.attr("id"); const isFullscreen = block.hasClass("block-mode-fullscreen"); const blockCount = $(".block_remember_state[id]").length; if (isFullscreen) { console.log(block.data("prevHidden")); Dashmix.block("fullscreen_off", "#" + blockId); if (blockCount !== 1) { if(typeof block.data("prevHidden") !== "undefined") { block.toggleClass("block-mode-hidden", block.data("prevHidden")); } } } else { block.data("prevHidden", block.hasClass("block-mode-hidden")); block.removeClass("block-mode-hidden"); Dashmix.block("fullscreen_on", "#" + blockId); } saveBlockState(); }); function saveBlockToggle() { const blockToggle = {}; $(".block_toggle[id]").each(function () { const blockId = $(this).attr("id"); blockToggle[blockId] = { hidden: $(this).hasClass("block-mode-hidden"), fullscreen: $(this).hasClass("block-mode-fullscreen"), }; }); localStorage.setItem("blockToggle", JSON.stringify(blockToggle)); } function restoreBlockToggle() { const blockToggle = JSON.parse(localStorage.getItem("blockToggle")) || {}; const blockCount = $(".block_toggle[id]").length; for (const blockId in blockToggle) { const block = $(".block_toggle#" + blockId); if (blockCount === 1) { block.removeClass("block-mode-hidden"); } else { block.toggleClass("block-mode-hidden", blockToggle[blockId].hidden); } block.toggleClass("block-mode-fullscreen", blockToggle[blockId].fullscreen); } } restoreBlockToggle(); $(".block_toggle .block-header").on("click", function (event) { if ($(event.target).closest(".block-options").length > 0) return; const block = $(this).closest(".block_toggle[id]"); const blockCount = $(".block_toggle[id]").length; if (block.length === 0 || block.hasClass("block-mode-fullscreen") || blockCount === 1) return; block.toggleClass("block-mode-hidden"); saveBlockToggle(); }); $('.block_toggle [data-action="fullscreen_toggle"]').on("click", function (event) { event.stopImmediatePropagation(); const block = $(this).closest(".block_toggle[id]"); if (block.length === 0) return; const blockId = block.attr("id"); const isFullscreen = block.hasClass("block-mode-fullscreen"); const blockCount = $(".block_toggle[id]").length; if (isFullscreen) { Dashmix.block("fullscreen_off", "#" + blockId); if (blockCount !== 1) { block.toggleClass("block-mode-hidden", block.data("prevHidden")); } } else { block.data("prevHidden", block.hasClass("block-mode-hidden")); block.removeClass("block-mode-hidden"); Dashmix.block("fullscreen_on", "#" + blockId); } saveBlockToggle(); }); $('body').on('focus', 'td[contenteditable], .form-control[contenteditable]', function() { }).on('paste', 'td[contenteditable], .form-control[contenteditable], td [contenteditable]', function(e) { $(this).data('before', $(this).html().trim()); }).on('paste', 'td[contenteditable], .form-control[contenteditable], td [contenteditable]', function(e) { e.preventDefault(); var pastedData = (e.originalEvent || e).clipboardData.getData('text/plain'); document.execCommand('insertText', false, pastedData); }).on('keypress', 'td[contenteditable], .form-control[contenteditable], td [contenteditable]', function(e) { if (e.which === 13) { e.preventDefault(); $(this).blur(); } }).on('focusout', 'td[contenteditable], .form-control[contenteditable], td [contenteditable]', function() { const data = $(this).data(); data.contenteditable = true; data.after = $(this).html().trim(); if (data.before !== undefined && data.before !== data.after) { $.post(location.href, { ...data }, (res) => { if (res.success) { Dashmix.helpersOnLoad('jq-notify', { type: 'success', icon: 'fa fa-check me-1', message: res.message }); $(this).data('before', data.after); } else { Swal.fire({ icon: 'error', text: res.message, showConfirmButton: false }); } }); } }); $('body').on('change', '[data-bool]', function() { const data = $(this).data(); data.bool = true; if (typeof(data.input_type) !== 'undefined' && data.input_type == 'array') { var inputArray = $('input[name^="permission["][name$="]"]').toArray(); var data_array = []; inputArray.forEach(function(input) { var data_input = ""; data_input = $(input).data(); data_input.after = $(input).is(':checked') ? 1 : 0; data_array.push(data_input) ; }); console.log(data_array); data.after = JSON.stringify(data_array); } else { data.after = $(this).is(':checked') ? 1 : 0; } $.post(location.href, { ...data }, (res) => { if (res.success) { Dashmix.helpersOnLoad('jq-notify', { type: 'success', icon: 'fa fa-check me-1', message: res.message }); } else { Swal.fire({ icon: 'error', text: res.message, showConfirmButton: false }); } }); }); function check_to_action(){ $('.js_checkbox').each(function(){ if($(this).is(':checked')){ $(this).parents('tr').addClass('table-warning'); }else{ $(this).parents('tr').removeClass('table-warning'); } }); let count_checked = $('.js_checkbox:checked').length; if(count_checked){ $('#js_action_button button').prop('disabled', false); $('#js_count_checked').html(' ('+count_checked+')'); let list_checked = $('.js_checkbox:checked').map(function(){return $(this).val();}).get().join(); }else{ $('#js_action_button button').prop('disabled', true); $('#js_count_checked').html(''); } } $('body').on('change', '.js_checkbox', function(){ check_to_action(); }); $('body').on('change', '.js_check_all', function(){ $('.js_checkbox').prop('checked', $('.js_check_all').is(':checked')); check_to_action(); }); $(document).ready(function() { $('.js-gallery').magnificPopup({ delegate: 'img', type: 'image', closeOnContentClick: false, closeBtnInside: true, gallery: { enabled: true, tCounter:"%curr% / %total%" }, callbacks: { elementParse: function(qw) { qw.src = qw.el.attr('src'); }, beforeOpen: function() { jQuery('body').css('overflow', 'hidden'); }, beforeClose: function() { jQuery('body').css('overflow', 'auto'); } }, }); $('.js-gallerys').magnificPopup({ delegate: 'a', type: 'image', closeOnContentClick: false, closeBtnInside: true, image: { verticalFit: true, titleSrc: function(item) { return '<a class="delete_imgs text-danger" href="javascript:void(0)" data-source="'+item.el.attr('href')+'"><i class="far fa-trash-alt"></i> Xóa</a>'; } }, gallery: { enabled: true, tCounter:"%curr% / %total%" } }); }); var clipboard = new Clipboard('.js_clipboard'); clipboard.on('success', function(e){ Dashmix.helpersOnLoad('jq-notify', {type:'success',icon:'fa fa-check me-1',message:'Đã sao chép!'}); return false; }); $(".js_flatpickr_date_range").flatpickr({ mode: "range", locale:{ rangeSeparator:" -> " ,weekdays:{ shorthand: ["Cn","T2","T3","T4","T5","T6","T7"] ,longhand:["Chủ nhật","Thứ hai","Thứ ba","Thứ tư","Thứ năm","Thứ sáu","Thứ bảy"] } ,months:{ shorthand: ["Th01","Th02","Th03","Th04","Th05","Th06","Th07","Th08","Th09","Th10","Th11","Th12"] ,longhand: ["Tháng 01","Tháng 02","Tháng 03","Tháng 04","Tháng 05","Tháng 06","Tháng 07","Tháng 08","Tháng 09","Tháng 10","Tháng 11","Tháng 12"] } }, onReady: function(dateObj, dateStr, instance) { var $cal = $(instance.calendarContainer); if ($cal.find('.flatpickr-clear').length < 1) { $cal.append('<div class="flatpickr-clear btn d-block btn-secondary btn-sm m-1">Hủy</div>'); $cal.find('.flatpickr-clear').on('click', function() { instance.clear(); instance.close(); }); } } }); $(".js_flatpickr_datetime").flatpickr({ enableTime: true, dateFormat: "Y-m-d H:i", time_24hr: true, locale:{ weekdays:{ shorthand: ["Cn","T2","T3","T4","T5","T6","T7"] ,longhand:["Chủ nhật","Thứ hai","Thứ ba","Thứ tư","Thứ năm","Thứ sáu","Thứ bảy"] } ,months:{ shorthand: ["Th01","Th02","Th03","Th04","Tháng 05","Th06","Th07","Th08","Th09","Th10","Th11","Th12"] ,longhand: ["Tháng 01","Tháng 02","Tháng 03","Tháng 04","Tháng 05","Tháng 06","Tháng 07","Tháng 08","Tháng 09","Tháng 10","Tháng 11","Tháng 12"] } }, onReady: function(dateObj, dateStr, instance) { var $cal = $(instance.calendarContainer); if ($cal.find('.flatpickr-clear').length < 1) { $cal.append('<div class="flatpickr-clear btn d-block btn-secondary btn-sm m-1">Bỏ</div>'); $cal.find('.flatpickr-clear').on('click', function() { instance.clear(); instance.close(); }); } } }); $(".js_flatpickr_date").each(function () { const minDate = $(this).data("mindate"); const config = { enableTime: false, dateFormat: "Y-m-d", locale: { weekdays: { shorthand: ["Cn", "T2", "T3", "T4", "T5", "T6", "T7"], longhand: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"], }, months: { shorthand: [ "Th01", "Th02", "Th03", "Th04", "Tháng 05", "Th06", "Th07", "Th08", "Th09", "Th10", "Th11", "Th12", ], longhand: [ "Tháng 01", "Tháng 02", "Tháng 03", "Tháng 04", "Tháng 05", "Tháng 06", "Tháng 07", "Tháng 08", "Tháng 09", "Tháng 10", "Tháng 11", "Tháng 12", ], }, }, onReady: function(dateObj, dateStr, instance) { var $cal = $(instance.calendarContainer); if ($cal.find('.flatpickr-clear').length < 1) { $cal.append('<div class="flatpickr-clear btn d-block btn-secondary btn-sm m-1">' + 'Hủy' + '</div>'); $cal.find('.flatpickr-clear').on('click', function() { instance.clear(); instance.close(); }); } } }; if (minDate) { config.minDate = minDate; } $(this).flatpickr(config); }); $(".js_flatpickr_month").each(function () { $(this).flatpickr({ plugins: [ new monthSelectPlugin({ longhand: true, dateFormat: "Y-m", altFormat: "Y-m", theme: "light" }) ], locale:{ weekdays:{ shorthand: ["Cn","T2","T3","T4","T5","T6","T7"] ,longhand:["Chủ nhật","Thứ hai","Thứ ba","Thứ tư","Thứ năm","Thứ sáu","Thứ bảy"] } ,months:{ shorthand: ["Th01","Th02","Th03","Th04","Th05","Th06","Th07","Th08","Th09","Th10","Th11","Th12"] ,longhand: ["Tháng 01","Tháng 02","Tháng 03","Tháng 04","Tháng 05","Tháng 06","Tháng 07","Tháng 08","Tháng 09","Tháng 10","Tháng 11","Tháng 12"] } }, onReady: function(dateObj, dateStr, instance) { var $cal = $(instance.calendarContainer); if ($cal.find('.flatpickr-clear').length < 1) { $cal.append('<div class="flatpickr-clear btn d-block btn-secondary btn-sm m-1">' + 'Hủy' + '</div>'); $cal.find('.flatpickr-clear').on('click', function() { instance.clear(); instance.close(); }); } } }); }); $('.ajax_cropper').on('change', function(){ $('#page-loader').addClass('show'); $('#modal_cropper_img').removeClass('cropper-hidden'); var form_data = new FormData(); var files = $(this)[0].files[0]; form_data.append('ajax_upload_img', files); $(this).val(''); var width = $(this).data('width'); var height = $(this).data('height'); var name = $(this).data('name'); var lang = $(this).data('lang'); $.ajax({ url: '/vi/ajax/cropper/', type: 'post', data: form_data, dataType: 'json', contentType: false, processData: false, success: function(response){ $('#page-loader').removeClass('show'); if(response.success==false){ alert(response.message); }else{ if($('input[name="'+name+'"][data-lang="'+lang+'"]').length == 0 && lang == ''){ $('input[data-name="'+name+'"][data-lang="'+lang+'"]').after('<input type="hidden" data-lang="'+lang+'" name="'+name+'">'); }else if($('input[name="'+name+'['+lang+']"]').length == 0 && lang != ''){ $('input[data-name="'+name+'"][data-lang="'+lang+'"]').after('<input type="hidden" data-lang="'+lang+'" name="'+name+'['+lang+']">'); } if(response.ext == 'svg'){ $('.thumbnail_zoom[data-name="'+name+'"][data-lang="'+lang+'"]').removeClass('d-none'); $('.ajax_cropper_img[data-name="'+name+'"][data-lang="'+lang+'"]').attr('src', response.tmp_name); $('.thumbnail_zoom[data-name="'+name+'"][data-lang="'+lang+'"]').attr('href', response.tmp_name); $('input[name="'+name+'['+lang+']"][data-lang="'+lang+'"]').val(response.tmp_name); }else{ $('#modal_cropper_img').attr('src', response.tmp_name); $('#modal_cropper_img').data('width', width); $('#modal_cropper_img').data('height', height); $('#modal_cropper_img').data('name', name); $('#modal_cropper_img').data('lang', lang); $('#modal_cropper').modal('show'); $('.cropper-container').remove(); } } } }); }); $('body').on('change', '.ajax_cropper_upload_imgs',function(){ $('#page-loader').addClass('show'); var form_data = new FormData(); $.each($(this)[0].files, function(k, v){ form_data.append('ajax_upload_imgs[]', v); }); $(this).val(''); var name = $(this).data('name'); var lang = $(this).data('lang'); $.ajax({ url: '/vi/ajax/cropper/', type: 'post', data: form_data, dataType: 'json', contentType: false, processData: false, success: function(response){ $('#page-loader').removeClass('show'); if(response.success==false){ alert(response.message); }else if(!response.tmps_name.length){ alert('Không thể tải ảnh, vui lòng thử lại.'); }else{ $.each(response.tmps_name, function(k, v){ if(lang == ''){ $('.ajax_cropper_imgs[data-name="'+name+'"][data-lang="'+lang+'"]').append('<a class="img-link img-link-zoom-in img-lightbox me-1 mb-1" hre'+'f="'+v+'"><img height="31" sr'+'c="'+v+'"><input type="hidden" name="'+name+'[]" value="'+v+'"></a>'); }else{ $('.ajax_cropper_imgs[data-name="'+name+'"][data-lang="'+lang+'"]').append('<a class="img-link img-link-zoom-in img-lightbox me-1 mb-1" hre'+'f="'+v+'"><img height="31" sr'+'c="'+v+'"><input type="hidden" name="'+name+'['+lang+'][]" value="'+v+'"></a>'); } }); $('.ajax_cropper_imgs[data-name="'+name+'"][data-lang="'+lang+'"]').after('<script>jQuery(function(){ Dashmix.helpersOnLoad(\'jq-magnific-popup\'); })<\/script>'); } } }); }); $('body').on('click', '.delete_imgs', function(){ var href = $(this).data('source'); $('a[href*="'+href+'"]').remove(); var magnificPopup = $.magnificPopup.instance; magnificPopup.close(); }); function escapeHtml(str){ var map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' }; return str.replace(/[&<>"']/g, function(m) {return map[m];}); } $('body').on('click', '#js_delete_button', function(){ Swal.fire({ icon: 'warning', title: "Bạn có chắc?", text: "Sau khi xóa dữ liệu sẽ không thể khôi phục lại được.", buttonsStyling: false, showCancelButton: true, cancelButtonText: "Hủy", confirmButtonText: "Xóa ngay", customClass: { confirmButton: "btn btn-danger m-1", cancelButton: "btn btn-secondary m-1", inputClass: "form-control", } }).then((result) => { if(result.value) { let count_checked = $('.js_checkbox:checked').length; if(!count_checked){ location.reload(); }else{ let array_checked = new Array(); let list_checked = $('.js_checkbox:checked').map(function(){ array_checked.push(escapeHtml($(this).val())); }).get().join(); $.post(location.href, {deletes:array_checked}, function(res){ if(res.success!=true){ location.reload(); }else{ $.get(location.href, function(data){ $.each(['js_tbody','js_action_button','js_paging'], function(i, key) { $('#'+key).html($(data).find('#'+key).html()); }); },'html'); $('.js_check_all').prop('checked', false); Dashmix.helpersOnLoad('jq-notify', {type: 'success', icon: 'fa fa-check me-1', message: 'Đã xóa.'}); } }); } } }); return false; }); if ($('[data-js="no-line-break"]').length > 0) { $('[data-js="no-line-break"]').each(function(){ autosize($(this)); }); $('body').on('keypress keyup', '[data-js="no-line-break"]', function(e){ if(e.which == '13') { return false; } }); document.querySelector('[data-js="no-line-break"]').addEventListener('input', function(){ this.value = this.value.replace(/(\r\n|\n|\r)/gm, ""); }); } $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) { setTimeout(function(){ $('[data-js="no-line-break"]').each(function(){ autosize($(this)); }); }, 2000); }); $.extend(true, $.summernote.lang, { 'vi': { imageAttributes: { dialogTitle: 'Thuộc tính hình ảnh', tooltip: 'Thuộc tính hình ảnh', tabImage: 'Hình ảnh', src: 'Đường dẫn', browse: 'Trình duyệt', title: 'Tiêu đề', alt: 'Mô tả ảnh', dimensions: 'Kích thước', tabAttributes: 'Cài đặt thuộc tính', class: 'Class', style: 'Style', role: 'Role', tabLink: 'Cài đặt đường dẫn', linkHref: 'Đường dẫn', linkTarget: 'Mở trong', linkTargetInfo: 'Tùy chọn: _self, _blank, _top, _parent', linkClass: 'Class', linkStyle: 'Style', linkRel: 'Rel', linkRelInfo: 'Tùy chọn: alternate, author, bookmark, help, license, next, nofollow, noreferrer, prefetch, prev, search, tag', linkRole: 'Role', tabUpload: 'Thay đổi ảnh', upload: 'Chọn', tabBrowse: 'Trình duyệt', editBtn: 'Lưu' }, font: { bold: 'In đậm', italic: 'In nghiêng', underline: 'Gạch chân', clear: 'Bỏ định dạng', height: 'Chiều cao dòng', name: 'Phông chữ', strikethrough: 'Gạch ngang', subscript: 'Chỉ số dưới', superscript: 'Chỉ số trên', size: 'Cỡ chữ', }, image: { image: 'Hình ảnh', insert: 'Chèn', resizeFull: '100%', resizeHalf: '50%', resizeQuarter: '25%', floatLeft: 'Trôi về trái', floatRight: 'Trôi về phải', floatNone: 'Không trôi', shapeRounded: 'Viền bo góc', shapeCircle: 'Viền tròn', shapeThumbnail: 'Viền thumbnail', shapeNone: 'Không viền', dragImageHere: 'Thả ảnh ở vùng này', dropImage: 'Thả ảnh hoặc văn bản', selectFromFiles: 'Chọn từ tập tin', maximumFileSize: 'Dung lượng tối đa', maximumFileSizeError: 'Vượt quá dung lượng cho phép', url: 'Liên kết', remove: 'Xóa', original: 'Nguyên bản', }, video: { video: 'Video', videoLink: 'Link đến Video', insert: 'Chèn Video', url: 'Liên kết', providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion và Youku)', }, link: { link: 'Liên kết', insert: 'Chèn liên kết', unlink: 'Gỡ liên kết', edit: 'Sửa', textToDisplay: 'Văn bản hiển thị', url: 'Liên kết', openInNewWindow: 'Mở ở cửa sổ mới', }, table: { table: 'Bảng', addRowAbove: 'Thêm hàng ở trên', addRowBelow: 'Thêm hàng ở dưới', addColLeft: 'Thêm cột bên trái', addColRight: 'Thêm cột bên phải', delRow: 'Xóa hàng', delCol: 'Xóa cột', delTable: 'Xóa bảng', }, hr: { insert: 'Chèn', }, style: { style: 'Kiểu chữ', p: 'Chữ thường', blockquote: 'Đoạn trích', pre: 'Nhúng code', h1: 'H1', h2: 'H2', h3: 'H3', h4: 'H4', h5: 'H5', h6: 'H6', }, lists: { unordered: 'Liệt kê danh sách', ordered: 'Liệt kê theo thứ tự', }, options: { help: 'Trợ giúp', fullscreen: 'Toàn màn hình', codeview: 'Xem code', }, paragraph: { paragraph: 'Canh lề', outdent: 'Dịch sang trái', indent: 'Dịch sang phải', left: 'Canh trái', center: 'Canh giữa', right: 'Canh phải', justify: 'Canh đều', }, color: { recent: 'Màu chữ', more: 'Mở rộng', background: 'Màu nền', foreground: 'Màu chữ', transparent: 'Trong suốt', setTransparent: 'Nền trong suốt', reset: 'Thiết lập lại', resetToDefault: 'Mặc định', }, shortcut: { shortcuts: 'Phím tắt', close: 'Đóng', textFormatting: 'Định dạng văn bản', action: 'Hành động', paragraphFormatting: 'Định dạng', documentStyle: 'Kiểu văn bản', extraKeys: 'Phím phụ', }, help: { 'insertParagraph': 'Chèn đoạn văn', 'undo': 'Hoàn tác', 'redo': 'Làm lại', 'tab': 'Thụt dòng', 'untab': 'Bỏ thụt dòng', 'bold': 'In đậm', 'italic': 'In nghiêng', 'underline': 'Gạch dưới', 'strikethrough': 'Gạch bỏ', 'removeFormat': 'Xóa định dạng', 'justifyLeft': 'Căn trái', 'justifyCenter': 'Căn giữa', 'justifyRight': 'Căn phải', 'justifyFull': 'Căn đều', 'insertUnorderedList': 'Chèn danh sách không thứ tự', 'insertOrderedList': 'Chèn danh sách có thứ tự', 'outdent': 'Bỏ thụt lề', 'indent': 'Thụ lề', 'formatPara': 'Định dạng đoạn văn (thẻ p)', 'formatH1': 'Định dạng H1', 'formatH2': 'Định dạng H2', 'formatH3': 'Định dạng H3', 'formatH4': 'Định dạng H4', 'formatH5': 'Định dạng H5', 'formatH6': 'Định dạng H6', 'insertHorizontalRule': 'Chèn đường kẻ ngang', 'linkDialog.show': 'Hiển thị hộp thoại liên kết', }, history: { undo: 'Hoàn tác', redo: 'Làm lại', }, specialChar: { specialChar: 'Ký tự đặc biệt', select: 'Chọn', }, } }); $('.summernote').summernote({ inheritPlaceholder: true, minHeight: 100, toolbar: [ ['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ['insert', ['hr', 'table', 'link', 'picture', 'video']], ['misc', ['codeview', 'fullscreen']], ], popover: { image: [ ['custom', ['imageAttributes']], ['imagesize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']] ], table: [ ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']], ['delete', ['deleteRow', 'deleteCol', 'deleteTable']], ], link: [ ['link', ['linkDialogShow', 'unlink']] ], }, captionIt:{ figureClass:'{figure-class/es}', figcaptionClass:'{figcapture-class/es}', captionText:'{Default Caption Editable Placeholder Text if Title or Alt are empty}' }, save:{ encode: false }, lang: 'vi', callbacks: { onPaste: function (e) { var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text'); e.preventDefault(); document.execCommand('insertText', false, bufferText); }, onImageUpload: function(files, editor, welEditable) { var my_editor = $(this); $.each(files, function(k, v){ sendFile(v, my_editor, welEditable); }); } } }); $('body').on('change', '#NewImage',function(){ var form_data = new FormData(); var files = $(this)[0].files[0]; form_data.append('summernote', files); $.ajax({ data: form_data, type: "POST", url: location.href, cache: false, contentType: false, processData: false, success: function(url) { $('.note-imageAttributes-src').val(url); } }); }); $('.summernote_mini').summernote({ inheritPlaceholder: true, height: 100, toolbar: [ ['style', ['bold', 'italic', 'underline', 'clear']], ['font', ['strikethrough', 'superscript', 'subscript']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ], callbacks: { onPaste: function (e) { var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text'); e.preventDefault(); document.execCommand('insertText', false, bufferText); }, onImageUpload: function(files, editor, welEditable) { alert('Không được phép tải ảnh lên vị trí này'); return false; } } }); function sendFile(file, editor, welEditable) { data = new FormData(); data.append("summernote", file); $.ajax({ data: data, type: 'POST', xhr: function() { var myXhr = $.ajaxSettings.xhr(); if (myXhr.upload) myXhr.upload.addEventListener('progress', progressHandlingFunction, false); return myXhr; }, url: "/vi/ajax/summernote/", cache: false, contentType: false, processData: false, success: function(data) { if(data.success == true){ if (data.type == 'image') { editor.summernote('editor.insertImage', data.url); } else { editor.summernote('editor.pasteHTML','<a href'+'="'+data.url+'" download>'+data.name+'</a>&nbsp;'); } }else{ alert(data.message); } } }); } function progressHandlingFunction(e) { if (e.lengthComputable) { $('progress').attr({ value: e.loaded, max: e.total }); if (e.loaded == e.total) { $('progress').attr('value', '0.0'); } } } function isValidUrl(url) { var myVariable = url; if (/^(http|https|ftp):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/i.test(myVariable)) { return 1; } else { return 0; } } $('body').on('click', '.note-modal', function() { $('.note-modal').removeClass('open'); $('.note-modal').css('display', 'none'); $('.note-modal-backdrop').remove(); }); $('body').on('click', '.note-modal-content', function(event) { event.stopPropagation(); }); function rememberForm() { $('form.rememberForm').each(function() { var form = $(this); var formId = form.attr('id'); if (!formId || formId.trim() === '') { return; } form.find('input:not([type="file"]), textarea, select').each(function() { var element = $(this); var elementName = element.attr('name'); if (!elementName || elementName.trim() === '') { return; } var name = location.href.split('?')[0] + '_' + formId + '_' + elementName; var savedValue = localStorage.getItem(name); if (savedValue) { if (element.is(':checkbox') || element.is(':radio')) { element.prop('checked', savedValue === 'true'); } else if (element.hasClass('summernote')) { element.summernote('code', savedValue); } else if (element.is('select[multiple]')) { var selectedValues = savedValue.split(','); element.val(selectedValues); } else { element.val(savedValue); } } if (element.hasClass('summernote')) { element.on('summernote.change', function() { localStorage.setItem(name, element.summernote('code')); }); } else { element.on('change', function() { if (element.is(':checkbox') || element.is(':radio')) { localStorage.setItem(name, element.is(':checked')); } else if (element.is('select[multiple]')) { localStorage.setItem(name, element.val().join(',')); } else { localStorage.setItem(name, element.val()); } }); } }); form.find('input.js_flatpickr_date').each(function() { var element = $(this); var elementName = element.attr('name'); if (!elementName || elementName.trim() === '') { return; } var name = location.href.split('?')[0] + '_' + formId + '_' + elementName; var savedValue = localStorage.getItem(name); if (savedValue) { element.val(savedValue); } var flatpickrInstance = element[0]._flatpickr; if (flatpickrInstance) { flatpickrInstance.config.onChange.push(function(selectedDates, dateStr) { localStorage.setItem(name, dateStr); }); } }); }); } function clearForm(form) { var formId = form.attr('id'); if (!formId || formId.trim() === '') { return; } form.find('input:not([type="file"]), textarea, select').each(function() { var element = $(this); var elementName = element.attr('name'); if (!elementName || elementName.trim() === '') { return; } var name = location.href.split('?')[0] + '_' + formId + '_' + elementName; if (element.is(':checkbox') || element.is(':radio')) { element.prop('checked', false); } else if (element.hasClass('summernote')) { element.summernote('code', ''); } else if (element.hasClass('js-rangeslider')) { var min = element.data('min'); element.val(min).change(); if (element.data("ionRangeSlider")) { element.data("ionRangeSlider").update({ from: min }); } } else if (element.hasClass('js-select2')) { element.val(element.find("option:first").val()).trigger('change'); } else { element.val(''); } localStorage.removeItem(name); }); form.find('input.js_flatpickr_date').each(function() { var element = $(this); var elementName = element.attr('name'); if (!elementName || elementName.trim() === '') { return; } var name = location.href.split('?')[0] + '_' + formId + '_' + elementName; element.val(''); localStorage.removeItem(name); }); } rememberForm(); $('.clearForm').on('click', function() { var form = $(this).closest('form'); clearForm(form); }); $('.js-select2-multiple-to-one').select2({ selectionCssClass: 'select2-sm' }).on('select2:select', function(e) { var newValue = e.params.data.id; $(this).val(null); $(this).val([newValue]).trigger('change', true); }).on('select2:unselect', function() { $(this).val(null).trigger('change', true); }); $('.js-cleave-int').each(function() { var cleaveInstance = new Cleave($(this), { numeral: true, numeralThousandsGroupStyle: 'thousand', numeralDecimalMark: ',', delimiter: '.' }); $(this).data('cleave', cleaveInstance); $(this).on('input cut paste', function() { var rawValue = cleaveInstance.getRawValue(); $('#'+this.id+'_hidden').val(rawValue); }); }); function summernote_custom(class_custom, air_mode){ $('.'+class_custom).summernote({ inheritPlaceholder: true, airMode:air_mode, minHeight: 100, toolbar: [ ['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ['insert', ['hr', 'table', 'link', 'picture', 'video']], ['misc', ['codeview','full_editor', 'fullscreen']], ], popover: { air: [ ['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ['insert', ['hr', 'table', 'link', 'picture', 'video']], ['misc', ['codeview', 'full_editor', 'fullscreen']], ], image: [ ['custom', ['imageAttributes']], ['imagesize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']] ], table: [ ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']], ['delete', ['deleteRow', 'deleteCol', 'deleteTable']], ], link: [ ['link', ['linkDialogShow', 'unlink']] ], buttons: { }, }, captionIt:{ figureClass:'{figure-class/es}', figcaptionClass:'{figcapture-class/es}', captionText:'{Default Caption Editable Placeholder Text if Title or Alt are empty}' }, buttons: { }, }); } summernote_custom('summernote_air_add_task', true); $('[data-js="autosize"]').each(function(){ autosize($(this)); }); moment.locale('vi', { relativeTime: { future: '%s sau', past: '%s trước', s: 'vài giây', m: '1 phút', mm: '%d phút', h: '1 giờ', hh: '%d giờ', d: '1 ngày', dd: '%d ngày', w: '1 tuần', ww: '%d tuần', M: '1 tháng', MM: '%d tháng', y: '1 năm', yy: '%d năm' }, calendar: { sameDay: '[Hôm nay]', nextDay: '[Ngày mai]', lastDay: '[Hôm qua]', nextWeek: 'dddd [tuần tới]', lastWeek: 'dddd [tuần trước]', sameElse: 'L' } });